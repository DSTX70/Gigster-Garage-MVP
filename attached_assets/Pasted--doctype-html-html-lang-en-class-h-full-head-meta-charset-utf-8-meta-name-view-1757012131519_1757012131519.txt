<!doctype html>
<html lang="en" class="h-full">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Gigster Garage — UI Mock (Single File)</title>

  <!-- Tailwind (CDN) -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        extend: {
          colors: {
            slateInk: '#1A241A',
            lightCard: '#F7F9FA',
            brand: {
              teal: '#008272',
              tealTint: '#66E0C7',
              blueTint: '#66C7FF',
              amber: '#FFB200',
              amberTint: '#FFD87A'
            }
          },
          boxShadow: {
            card: '0 6px 22px rgba(0,0,0,0.06)'
          },
          borderRadius: {
            xl2: '1.25rem'
          }
        }
      }
    }
  </script>

  <style>
    :root{
      --grad-teal-amber: linear-gradient(90deg, #008272 0%, #FFB200 100%);
      --grad-soft: linear-gradient(90deg, #E7F7F3 0%, #FFF3DB 100%);
    }
    .btn-glow{ box-shadow: 0 8px 26px rgba(0,130,114,.22), inset 0 0 0 1px rgba(255,178,0,.45); }
    .card{ @apply bg-white dark:bg-slate-900 shadow-card rounded-xl p-6; }
    .card-muted{ @apply bg-[#F7F9FA] dark:bg-slate-800 rounded-xl p-6; }
  </style>

  <!-- React (CDN) -->
  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>

<body class="h-full bg-white text-slate-900 dark:bg-slate-950 dark:text-slate-50">
<div id="root" class="h-full"></div>

<script type="text/babel">

/** ———————————————————————————
 * Utilities: storage + router
 * ——————————————————————————— */
const store = {
  get(key, fallback){ try{ const v = localStorage.getItem(key); return v ?? fallback }catch{ return fallback } },
  set(key, val){ try{ localStorage.setItem(key, val) }catch{} }
}

function useHashRoute() {
  const [hash, setHash] = React.useState(location.hash || '#/dashboard');
  React.useEffect(() => {
    const fn = () => setHash(location.hash || '#/dashboard');
    window.addEventListener('hashchange', fn);
    return () => window.removeEventListener('hashchange', fn);
  }, []);
  return [hash, (h)=>location.hash=h];
}

/** ———————————————————————————
 * Icon system (30 icons, outline+filled)
 * ——————————————————————————— */
function Svg({children, size=24, className}) {
  return (
    <svg width={size} height={size} viewBox="0 0 24 24" className={className} aria-hidden>
      <defs>
        <linearGradient id="gg-grad" x1="0" x2="1">
          <stop offset="0%" stopColor="#008272"/><stop offset="100%" stopColor="#FFB200"/>
        </linearGradient>
      </defs>
      {children}
    </svg>
  );
}

const ICONS = {
  // Core / Brand
  spark: (m)=> m==='outline'
    ? <path d="M12 2l-2 6h5l-3 6 2-6H9l3-6Z" fill="none" stroke="currentColor" strokeWidth="2" strokeLinejoin="round"/>
    : <path d="M12 2l-2 6h5l-3 6 2-6H9l3-6Z" fill="url(#gg-grad)"/>,
  rocket: (m)=> m==='outline'
    ? <path d="M12 3c3 0 6 3 6 6 0 4-6 12-6 12S6 13 6 9c0-3 3-6 6-6Zm0 5a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <g><path d="M12 3c3 0 6 3 6 6 0 4-6 12-6 12S6 13 6 9c0-3 3-6 6-6Z" fill="url(#gg-grad)"/><circle cx="12" cy="6" r="2" fill="#fff" opacity=".9"/></g>,
  check: (m)=> m==='outline'
    ? <path d="M5 13l4 4 10-10" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
    : <g><circle cx="12" cy="12" r="10" fill="url(#gg-grad)"/><path d="M8.5 12.5l2.5 2.5L16 10" stroke="#fff" strokeWidth="2.2" strokeLinecap="round"/></g>,
  padlock: (m)=> m==='outline'
    ? <g><rect x="5" y="11" width="14" height="9" rx="2" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M9 11V8a3 3 0 1 1 6 0v3" fill="none" stroke="currentColor" strokeWidth="2"/></g>
    : <g><rect x="5" y="11" width="14" height="9" rx="2" fill="url(#gg-grad)"/><path d="M9 11V8a3 3 0 1 1 6 0v3" stroke="#fff" strokeWidth="2"/></g>,
  calendar: (m)=> m==='outline'
    ? <g><rect x="4" y="6" width="16" height="14" rx="2" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M8 3v4M16 3v4M4 10h16" stroke="currentColor" strokeWidth="2"/></g>
    : <g><rect x="4" y="6" width="16" height="14" rx="2" fill="url(#gg-grad)"/><path d="M8 3v4M16 3v4M4 10h16" stroke="#fff" strokeWidth="2"/></g>,
  flame: (m)=> m==='outline'
    ? <path d="M12 5c2.5 3-1 4-1 6 0 1.5 1 2.5 1 2.5S15 12 15 9c0-2-1-3-3-4Zm0 14a5 5 0 0 1-5-5c0-4 5-6 5-6s5 2 5 6a5 5 0 0 1-5 5Z" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <g><path d="M12 5c2.5 3-1 4-1 6 0 1.5 1 2.5 1 2.5S15 12 15 9c0-2-1-3-3-4Z" fill="url(#gg-grad)"/><path d="M12 19a5 5 0 0 1-5-5c0-4 5-6 5-6s5 2 5 6a5 5 0 0 1-5 5Z" fill="url(#gg-grad)"/></g>,
  flag: (m)=> m==='outline'
    ? <path d="M6 4v16M6 4h8l-2 3 2 3H6" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <g><path d="M6 4h8l-2 3 2 3H6Z" fill="url(#gg-grad)"/><path d="M6 4v16" stroke="currentColor" strokeWidth="2"/></g>,
  clock: (m)=> m==='outline'
    ? <g><circle cx="12" cy="12" r="9" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M12 7v6l4 2" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/></g>
    : <g><circle cx="12" cy="12" r="9" fill="url(#gg-grad)"/><path d="M12 7v6l4 2" stroke="#fff" strokeWidth="2" strokeLinecap="round"/></g>,
  // Dashboard/Docs/Comms
  clipboard: (m)=> m==='outline'
    ? <g><rect x="6" y="5" width="12" height="16" rx="2" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M9 5h6v2H9zM8 11h8M8 15h8" stroke="currentColor" strokeWidth="2"/></g>
    : <g><rect x="6" y="5" width="12" height="16" rx="2" fill="url(#gg-grad)"/><path d="M9 5h6v2H9zM8 11h8M8 15h8" stroke="#fff" strokeWidth="2"/></g>,
  message: (m)=> m==='outline'
    ? <path d="M4 6h16v10H8l-4 4V6Z" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <g><path d="M4 6h16v10H8l-4 4V6Z" fill="url(#gg-grad)"/></g>,
  users: (m)=> m==='outline'
    ? <g><path d="M9 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M2 20a7 7 0 0 1 14 0" fill="none" stroke="currentColor" strokeWidth="2"/></g>
    : <g><path d="M9 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z" fill="url(#gg-grad)"/><path d="M2 20a7 7 0 0 1 14 0" stroke="url(#gg-grad)" strokeWidth="2" fill="none"/></g>,
  idbadge:(m)=> m==='outline'
    ? <g><rect x="6" y="4" width="12" height="16" rx="2" fill="none" stroke="currentColor" strokeWidth="2"/><circle cx="12" cy="11" r="2" stroke="currentColor" strokeWidth="2" fill="none"/><path d="M8 16h8" stroke="currentColor" strokeWidth="2"/></g>
    : <g><rect x="6" y="4" width="12" height="16" rx="2" fill="url(#gg-grad)"/><circle cx="12" cy="11" r="2" fill="#fff"/><path d="M8 16h8" stroke="#fff" strokeWidth="2"/></g>,
  paper:(m)=> m==='outline'
    ? <g><path d="M6 4h9l3 3v13H6z" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M15 4v3h3" stroke="currentColor" strokeWidth="2"/></g>
    : <g><path d="M6 4h9l3 3v13H6z" fill="url(#gg-grad)"/></g>,
  stamp:(m)=> m==='outline'
    ? <g><path d="M10 4h4v6H10zM5 18h14v2H5z" fill="none" stroke="currentColor" strokeWidth="2"/></g>
    : <g><path d="M10 4h4v6H10zM5 18h14v2H5z" fill="url(#gg-grad)"/></g>,
  invoice:(m)=> m==='outline'
    ? <g><rect x="5" y="4" width="14" height="16" rx="2" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M8 9h8M8 13h8M8 17h6" stroke="currentColor" strokeWidth="2"/><path d="M8 7h4" stroke="currentColor" strokeWidth="2"/></g>
    : <g><rect x="5" y="4" width="14" height="16" rx="2" fill="url(#gg-grad)"/><path d="M8 9h8M8 13h8M8 17h6M8 7h4" stroke="#fff" strokeWidth="2"/></g>,
  deck:(m)=> m==='outline'
    ? <g><rect x="4" y="6" width="16" height="12" rx="2" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M8 10h8M8 14h8" stroke="currentColor" strokeWidth="2"/></g>
    : <g><rect x="4" y="6" width="16" height="12" rx="2" fill="url(#gg-grad)"/><path d="M8 10h8M8 14h8" stroke="#fff" strokeWidth="2"/></g>,
  gear:(m)=> m==='outline'
    ? <path d="M12 8a4 4 0 1 1 0 8 4 4 0 0 1 0-8Zm0-6v2m0 16v2M4 12H2m20 0h-2M5.6 5.6 4.2 4.2m15.6 15.6-1.4-1.4M18.4 5.6l1.4-1.4M4.2 19.8l1.4-1.4" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <g><circle cx="12" cy="12" r="4" fill="url(#gg-grad)"/><path d="M12 2v2m0 16v2M4 12H2m20 0h-2M5.6 5.6 4.2 4.2m15.6 15.6-1.4-1.4M18.4 5.6l1.4-1.4M4.2 19.8l1.4-1.4" stroke="currentColor" strokeWidth="2"/></g>,
  database:(m)=> m==='outline'
    ? <g><ellipse cx="12" cy="6" rx="7" ry="3" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M5 6v8c0 1.7 3.1 3 7 3s7-1.3 7-3V6" fill="none" stroke="currentColor" strokeWidth="2"/></g>
    : <g><ellipse cx="12" cy="6" rx="7" ry="3" fill="url(#gg-grad)"/><path d="M5 6v8c0 1.7 3.1 3 7 3s7-1.3 7-3V6" stroke="url(#gg-grad)" strokeWidth="2" fill="none"/></g>,
  toolbox:(m)=> m==='outline'
    ? <g><rect x="4" y="8" width="16" height="10" rx="2" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M9 8V6h6v2" stroke="currentColor" strokeWidth="2"/></g>
    : <g><rect x="4" y="8" width="16" height="10" rx="2" fill="url(#gg-grad)"/><path d="M9 8V6h6v2" stroke="#fff" strokeWidth="2"/></g>,
  lightbulb:(m)=> m==='outline'
    ? <g><path d="M9 14c0-3 3-5 3-8a4 4 0 1 1 8 0c0 3-3 5-3 8" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M10 20h8" stroke="currentColor" strokeWidth="2"/></g>
    : <g><path d="M9 14c0-3 3-5 3-8a4 4 0 1 1 8 0c0 3-3 5-3 8" stroke="url(#gg-grad)" strokeWidth="2"/><rect x="10" y="19" width="8" height="2" fill="url(#gg-grad)"/></g>,
  upload:(m)=> m==='outline'
    ? <g><path d="M12 16V8m0 0-3 3m3-3 3 3" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/><rect x="4" y="16" width="16" height="4" rx="2" fill="none" stroke="currentColor" strokeWidth="2"/></g>
    : <g><path d="M12 16V8m0 0-3 3m3-3 3 3" stroke="#fff" strokeWidth="2"/><rect x="4" y="16" width="16" height="4" rx="2" fill="url(#gg-grad)"/></g>,
  chart:(m)=> m==='outline'
    ? <path d="M4 20V4m0 16h16M8 16v-4m4 4V8m4 8v-6" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <g><path d="M4 20V4m0 16h16" stroke="currentColor" strokeWidth="2"/><rect x="7" y="12" width="2" height="4" fill="url(#gg-grad)"/><rect x="11" y="8" width="2" height="8" fill="url(#gg-grad)"/><rect x="15" y="10" width="2" height="6" fill="url(#gg-grad)"/></g>,
  shield:(m)=> m==='outline'
    ? <g><path d="M12 3l8 3v5c0 5-4 8-8 10C8 19 4 16 4 11V6l8-3Z" fill="none" stroke="currentColor" strokeWidth="2"/></g>
    : <g><path d="M12 3l8 3v5c0 5-4 8-8 10C8 19 4 16 4 11V6l8-3Z" fill="url(#gg-grad)"/></g>,
  gift:(m)=> m==='outline'
    ? <g><rect x="4" y="10" width="16" height="10" rx="2" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M4 13h16M12 10v10M9 10c-2 0-3-1-3-2s1-2 2-2 2 1 3 3c1-2 2-3 3-3s2 1 2 2-1 2-3 2" stroke="currentColor" strokeWidth="2"/></g>
    : <g><rect x="4" y="10" width="16" height="10" rx="2" fill="url(#gg-grad)"/><path d="M4 13h16M12 10v10" stroke="#fff" strokeWidth="2"/></g>,
  // extras to reach 30
  target:(m)=> m==='outline'
    ? <g><circle cx="12" cy="12" r="8" fill="none" stroke="currentColor" strokeWidth="2"/><circle cx="12" cy="12" r="4" fill="none" stroke="currentColor" strokeWidth="2"/></g>
    : <g><circle cx="12" cy="12" r="8" fill="url(#gg-grad)"/><circle cx="12" cy="12" r="3" fill="#fff"/></g>,
  link:(m)=> m==='outline'
    ? <g><path d="M10 13a4 4 0 0 1 0-6l2-2a4 4 0 1 1 6 6l-1 1" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M14 11a4 4 0 0 1 0 6l-2 2a4 4 0 1 1-6-6l1-1" fill="none" stroke="currentColor" strokeWidth="2"/></g>
    : <g><path d="M10 13a4 4 0 0 1 0-6l2-2a4 4 0 1 1 6 6l-1 1" stroke="url(#gg-grad)" strokeWidth="2" fill="none"/><path d="M14 11a4 4 0 0 1 0 6l-2 2a4 4 0 1 1-6-6l1-1" stroke="url(#gg-grad)" strokeWidth="2" fill="none"/></g>,
  search:(m)=> m==='outline'
    ? <g><circle cx="11" cy="11" r="7" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M16.5 16.5 21 21" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/></g>
    : <g><circle cx="11" cy="11" r="7" fill="url(#gg-grad)"/><path d="M16.5 16.5 21 21" stroke="#fff" strokeWidth="2" strokeLinecap="round"/></g>,
  bell:(m)=> m==='outline'
    ? <path d="M6 16h12l-1-2v-4a5 5 0 0 0-10 0v4l-1 2Zm6 4a2 2 0 0 0 2-2H10a2 2 0 0 0 2 2Z" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <g><path d="M6 16h12l-1-2v-4a5 5 0 0 0-10 0v4l-1 2Z" fill="url(#gg-grad)"/><circle cx="12" cy="20" r="2" fill="#fff"/></g>,
  inbox:(m)=> m==='outline'
    ? <path d="M4 6h16v12H4zM4 14h5a3 3 0 0 0 6 0h5" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <g><path d="M4 6h16v12H4zM4 14h5a3 3 0 0 0 6 0h5" stroke="#fff" strokeWidth="2" fill="url(#gg-grad)"/></g>,
  home:(m)=> m==='outline'
    ? <path d="M3 11 12 4l9 7v8H3zM9 19v-4h6v4" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <g><path d="M3 11 12 4l9 7v8H3z" fill="url(#gg-grad)"/><path d="M9 19v-4h6v4" stroke="#fff" strokeWidth="2"/></g>,
  docCheck:(m)=> m==='outline'
    ? <g><path d="M6 4h9l3 3v13H6z" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M8.5 13.5l1.5 1.5 3-3" stroke="currentColor" strokeWidth="2"/></g>
    : <g><path d="M6 4h9l3 3v13H6z" fill="url(#gg-grad)"/><path d="M8.5 13.5l1.5 1.5 3-3" stroke="#fff" strokeWidth="2"/></g>,
  chartPie:(m)=> m==='outline'
    ? <g><circle cx="12" cy="12" r="8" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M12 4v8l6 6" stroke="currentColor" strokeWidth="2"/></g>
    : <g><circle cx="12" cy="12" r="8" fill="url(#gg-grad)"/><path d="M12 4v8l6 6" stroke="#fff" strokeWidth="2"/></g>,
  bolt:(m)=> m==='outline'
    ? <path d="M10 2v9H6l8 11-2-9h4L10 2Z" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <path d="M10 2v9H6l8 11-2-9h4L10 2Z" fill="url(#gg-grad)"/>,
  tag:(m)=> m==='outline'
    ? <path d="M3 12l9-9h6v6l-9 9-6-6Z" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <path d="M3 12l9-9h6v6l-9 9-6-6Z" fill="url(#gg-grad)"/>,
  star:(m)=> m==='outline'
    ? <path d="M12 3l2.8 5.6 6.2.9-4.5 4.4 1 6.1L12 17l-5.5 2.9 1-6.1L3 9.5l6.2-.9L12 3Z" fill="none" stroke="currentColor" strokeWidth="2"/>
    : <path d="M12 3l2.8 5.6 6.2.9-4.5 4.4 1 6.1L12 17l-5.5 2.9 1-6.1L3 9.5l6.2-.9L12 3Z" fill="url(#gg-grad)"/>,
  boltGear:(m)=> m==='outline'
    ? <g><circle cx="12" cy="12" r="4" fill="none" stroke="currentColor" strokeWidth="2"/><path d="M12 2v2m0 16v2M4 12H2m20 0h-2" stroke="currentColor" strokeWidth="2"/><path d="M11 9h2v2h2v2h-2v2h-2v-2H9v-2h2z" stroke="currentColor" strokeWidth="2"/></g>
    : <g><circle cx="12" cy="12" r="4" fill="url(#gg-grad)"/><path d="M11 9h2v2h2v2h-2v2h-2v-2H9v-2h2z" stroke="#fff" strokeWidth="2"/></g>,
};

const ICON_NAMES = Object.keys(ICONS); // 30 names

function Icon({name, mode='outline', size=22, className}) {
  const draw = ICONS[name] || ICONS.spark;
  return <Svg size={size} className={className}>{draw(mode)}</Svg>;
}

/** ———————————————————————————
 * UI Atoms
 * ——————————————————————————— */
function Button({children, onClick, variant='primary', glow=false}) {
  const base = 'inline-flex items-center gap-2 px-5 py-3 rounded-xl font-semibold transition';
  const styles = variant==='primary'
    ? 'text-white bg-slateInk/90 hover:bg-slateInk'
    : 'text-slate-800 dark:text-slate-200 border border-slate-300/70 dark:border-slate-600 bg-white/90 dark:bg-slate-900 hover:bg-white';
  return <button className={`${base} ${styles} ${glow?'btn-glow':''}`} onClick={onClick}>{children}</button>
}

function LockItInButton({onClick}) {
  return (
    <Button glow onClick={onClick}>
      <Icon name="padlock" mode="filled" className="text-white"/>
      <span>Lock It In</span>
    </Button>
  );
}

function SuccessBanner({children}) {
  return (
    <div className="rounded-xl px-5 py-4 text-slate-900 dark:text-slate-900" style={{background:'var(--grad-soft)'}}>
      <div className="flex items-center gap-3">
        <Icon name="check" mode="filled"/><p className="font-semibold">{children}</p>
      </div>
    </div>
  );
}

function Card({children, muted=false, className=''}) {
  return <div className={`${muted?'bg-[#F7F9FA] dark:bg-slate-800':'bg-white dark:bg-slate-900'} shadow-card rounded-xl p-6 ${className}`}>{children}</div>;
}

/** ———————————————————————————
 * Layout: NavBar + Dark Mode
 * ——————————————————————————— */
function useDarkMode() {
  const [dark, setDark] = React.useState(store.get('gg-dark', '0')==='1');
  React.useEffect(()=> {
    document.documentElement.classList.toggle('dark', dark);
    store.set('gg-dark', dark?'1':'0');
  }, [dark]);
  return [dark, setDark];
}

function NavBar({onGo}) {
  const [dark, setDark] = useDarkMode();
  return (
    <div className="w-full bg-gradient-to-r from-slate-900 to-slate-800 text-white">
      <div className="mx-auto max-w-6xl px-6 py-3 flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="font-bold">Gigster Garage</div>
          <span className="opacity-80 hidden sm:block">| Smarter tools for bolder dreams</span>
        </div>
        <div className="flex items-center gap-5">
          <button className="opacity-90 hover:opacity-100" title="Automation" onClick={()=>onGo('#/automation')}>
            <Icon name="spark"/>
          </button>
          <button className="opacity-90 hover:opacity-100" title="Dashboard" onClick={()=>onGo('#/dashboard')}>
            <Icon name="home"/>
          </button>
          <button className="opacity-90 hover:opacity-100" title="Contracts" onClick={()=>onGo('#/contracts/success')}>
            <Icon name="docCheck"/>
          </button>
          <button className="opacity-90 hover:opacity-100" title="Toggle dark" onClick={()=>setDark(!dark)}>
            <Icon name="moon" mode="outline" size={22}/>
          </button>
        </div>
      </div>
    </div>
  );
}
// add a simple moon icon using star outline path reuse
ICONS.moon = (m)=> m==='outline'
  ? <g><path d="M14 3a9 9 0 1 0 7 12A8 8 0 0 1 14 3Z" fill="none" stroke="currentColor" strokeWidth="2"/></g>
  : <path d="M14 3a9 9 0 1 0 7 12A8 8 0 0 1 14 3Z" fill="url(#gg-grad)"/>;

/** ———————————————————————————
 * Pages
 * ——————————————————————————— */
function WorkflowAutomation({onGo}) {
  return (
    <div>
      <NavBar onGo={onGo}/>
      <main className="mx-auto max-w-6xl px-6 py-8">
        <header className="mb-4">
          <h1 className="text-3xl font-extrabold">Workflow Automation</h1>
          <p className="text-slate-600 dark:text-slate-400">
            Automate repetitive tasks with intelligent rules and triggers.
          </p>
        </header>

        <div className="flex items-center gap-2 my-4">
          <span className="px-3 py-2 rounded-lg bg-[#F7F9FA] dark:bg-slate-800 flex items-center gap-2"><Icon name="spark"/> Automation Rules</span>
          <span className="px-3 py-2 rounded-lg flex items-center gap-2"><Icon name="clock"/> Execution History</span>
        </div>

        <Card muted className="border border-transparent" style={{borderBottom:'3px solid #FFB200', borderImage:'var(--grad-teal-amber) 1'}}>
          <div className="flex flex-col items-center gap-3 py-8">
            <Icon name="spark" mode="filled" size={36}/>
            <h3 className="text-xl font-semibold">No sparks flying yet</h3>
            <p className="text-slate-600 dark:text-slate-400">Create your first automation to keep the hustle running smooth.</p>
            <Button onClick={()=>alert('Open Create Rule wizard')}>
              <Icon name="spark"/> Create Your First Rule
            </Button>
          </div>
        </Card>
      </main>
    </div>
  );
}

function Dashboard({onGo}) {
  return (
    <div>
      <NavBar onGo={onGo}/>
      <main className="mx-auto max-w-6xl px-6 py-8 space-y-6">
        <h1 className="text-3xl font-extrabold">My Dashboard</h1>
        <p className="text-slate-600 dark:text-slate-400">Welcome back! Here’s what’s happening with your tasks and projects.</p>

        <div className="grid md:grid-cols-3 gap-4">
          <Card>
            <div className="flex items-center gap-3">
              <Icon name="flame" mode="filled"/>
              <div>
                <div className="font-semibold">Overdue</div>
                <div className="text-slate-600 dark:text-slate-400">No fires to put out</div>
              </div>
            </div>
          </Card>

          <Card className="bg-[#F7F9FA] dark:bg-slate-800">
            <div className="flex items-center gap-3">
              <Icon name="calendar"/>
              <div>
                <div className="font-semibold">Due Soon</div>
                <div className="text-slate-600 dark:text-slate-400">Nothing on the horizon — time to dream bigger</div>
              </div>
            </div>
          </Card>

          <Card>
            <div className="space-y-2">
              <div className="font-semibold flex items-center gap-2">
                <Icon name="rocket" mode="filled"/> Today’s Momentum
              </div>
              <div className="h-3 w-full rounded-full bg-slate-200 dark:bg-slate-700 overflow-hidden">
                <div className="h-full w-2/3 rounded-full" style={{background:'var(--grad-teal-amber)'}}/>
              </div>
              <div className="text-slate-600 dark:text-slate-400">Every minute fuels your hustle.</div>
            </div>
          </Card>
        </div>

        <div className="grid md:grid-cols-3 gap-4">
          <Card className="flex items-center gap-3"><Icon name="message"/><div><div className="font-semibold">Messages</div><div className="text-slate-600 dark:text-slate-400">Client communication</div></div></Card>
          <Card className="flex items-center gap-3"><Icon name="invoice"/><div><div className="font-semibold">Create Invoice</div><div className="text-slate-600 dark:text-slate-400">Generate professional invoices</div></div></Card>
          <Card className="flex items-center gap-3"><Icon name="clock"/><div><div className="font-semibold">Time Tracking</div><div className="text-slate-600 dark:text-slate-400">Every minute fuels your hustle.</div></div></Card>
        </div>
      </main>
    </div>
  );
}

function CreateContractSuccess({onGo}) {
  const disabled = (ph)=>(
    <input disabled placeholder={ph}
      className="w-full rounded-xl border border-slate-200 dark:border-slate-700 bg-slate-100/70 dark:bg-slate-800/70 text-slate-500 dark:text-slate-400 placeholder:text-slate-400 px-4 py-3"/>
  );
  return (
    <div>
      <NavBar onGo={onGo}/>
      <main className="mx-auto max-w-6xl px-6 py-8 space-y-6">
        <h1 className="text-3xl font-extrabold flex items-center gap-2">
          Create Contract <Icon name="padlock" className="text-slate-500"/>
        </h1>

        <SuccessBanner>Contract locked and ready — your hustle just leveled up.</SuccessBanner>

        <section className="bg-white dark:bg-slate-900 shadow-card rounded-xl p-6">
          <div className="grid md:grid-cols-2 gap-4">
            {disabled('Give this agreement a clear name.')}
            {disabled('Who’s on the other side of this deal?')}
            {disabled('Where do they do business?')}
            {disabled('Best email to make this official')}
          </div>
          <div className="mt-6 flex justify-end">
            <LockItInButton onClick={()=>alert('Already locked ✔')}/>
          </div>
        </section>
      </main>
    </div>
  );
}

/** ———————————————————————————
 * App / Router
 * ——————————————————————————— */
function App(){
  const [hash, go] = useHashRoute();
  const route = hash.replace('#','') || '/dashboard';

  let page = null;
  if (route.startsWith('/automation')) page = <WorkflowAutomation onGo={go}/>;
  else if (route.startsWith('/contracts/success')) page = <CreateContractSuccess onGo={go}/>;
  else page = <Dashboard onGo={go}/>;

  return <div className="min-h-screen">{page}</div>;
}

ReactDOM.createRoot(document.getElementById('root')).render(<App/>);
</script>
</body>
</html>